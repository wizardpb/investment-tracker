<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1464547144686">{:repl-history {:ide [], :local [&quot;(with-redefs [a \&quot;a2\&quot;] (print a))&quot; &quot;(client/get\n  (format-yahoo-historical-url [:YHOO :AAPL] (Date. 116 3 15)) {:as :json})&quot; &quot;::user&quot; &quot;(type ::user)&quot; &quot;(concat \&quot;a\&quot; [\&quot;b\&quot;])&quot; &quot;(concat [\&quot;a\&quot;] [\&quot;b\&quot;])&quot; &quot;(concat [\&quot;a\&quot;] [\&quot;b\&quot;] (repeat 5 \&quot;r\&quot;))&quot; &quot;(d/tx-range (d/log conn nil nil))&quot; &quot;(d/tx-range (d/log conn) nil nil)&quot; &quot;(defn load-schema [conn]\n  (letfn [(load-schema-file [index fname]\n            (let [schema (read-string (slurp (str schema-dir %2)))\n                  marker-tx [{:db/id        #db/id[:db.part/tx]\n                              :db/txinstant (Date. 70 00 01 0 index)}]]\n              @(d/transact conn (concat market-tx schema))))]\n    (map-indexed load-schema-file schema-files)\n    \&quot;Done\&quot;\n    ))&quot; &quot;(Date. 70 00 01 0 0)&quot; &quot;(Date. 70 00 01 -5 0)&quot; &quot;(Date. 70 00 01 -5 1)&quot; &quot;(Date. (* 60000 (+ 0 1)))&quot; &quot;(Date. (* 60000 (inc 0)))&quot; &quot;(Date. (* 60000 (inc 1)))&quot; &quot;(Date. (* 1000 (inc 1)))&quot; &quot;(Date. (* 1000 (inc 0)))&quot; &quot;(def results (rebuild-db))&quot; &quot;results&quot; &quot;(count (seq (d/tx-range (d/log conn) nil nil)))&quot; &quot;(seq (d/tx-range (d/log conn) nil nil))&quot; &quot;(map #(first (:data %1)) (seq (d/tx-range (d/log conn) nil nil)))&quot; &quot;(d/q '[:find ?e ?v ?tx :where [? :db/txInstant _ ?tx]])&quot; &quot;(d/q '[:find ?e ?v ?tx :where [? :db/txInstant ?v ?tx]])&quot; &quot;(d/q '[:find ?e ?v ?tx :where [?e :db/txInstant ?v ?tx]])&quot; &quot;(d/q '[:find ?e ?v ?tx :where [?e :db/txInstant ?v ?tx]] (q/db conn))&quot; &quot;(d/q '[:find ?e ?v ?tx :where [?e :db/txInstant ?v ?tx]] (d/db conn))&quot; &quot;(d/entity 13194139533366)&quot; &quot;(d/entity (d/db conn) 13194139533366)&quot; &quot;(touch (d/entity (d/db conn) 13194139533366))&quot; &quot;(d/touch (d/entity (d/db conn) 13194139533366))&quot; &quot;(d/q '[:find ?a ?v :where [13194139533366 ?a ?v]] (d/db conn))&quot; &quot;(d/q '[:find e ?a ?v :where [?e ?a ?v 13194139533366]] (d/db conn))&quot; &quot;(d/q '[:find ?e ?a ?v :where [?e ?a ?v 13194139533366]] (d/db conn))&quot; &quot;(d/q '[:find ?e ?v :where [?e :db/ident ?v 13194139533366]] (d/db conn))&quot; &quot;(d/q '[:find ?e ?v :where [?e :db/doc ?v 13194139533366]] (d/db conn))&quot; &quot;(d/q '[:find ?e ?v :where [?e :db/doc ?v _]] (d/db conn))&quot; &quot;(concat {:a \&quot;a\&quot;} {:b \&quot;b\&quot;})&quot; &quot;(merge {:a \&quot;a\&quot;} {:b \&quot;b\&quot;})&quot; &quot;(boolean {})&quot; &quot;(d/connect uri)&quot; &quot;(d/q '[:find ?e ?v :where [?e :db/provenance ?v _]] (d/db conn))&quot; &quot;(d/delete-database uri)&quot; &quot;(d/create-database uri)&quot; &quot;(add-tx-attributes conn)&quot; &quot;(def conn (d/connect uri))&quot; &quot;(load-schema conn)&quot; &quot;(rebuild-db)&quot; &quot;(count (rebuild-db))&quot; &quot;(merge {:a \&quot;a\&quot;} nil)&quot; &quot;di/uri&quot; &quot;(Date/today\n  )&quot; &quot;(Date/now\n  )&quot; &quot;(LocalDate)&quot; &quot;(LocalDate.\n  )&quot; &quot;@(d/transact conn {:db/id #db/id[db.part/user] :lot/trade-date (LocalDate/now)})&quot; &quot;(def conn (d/connect di/uri))&quot; &quot;@(d/transact conn [{:db/id #db/id[db.part/user] :lot/trade-date (LocalDate/now)}])&quot; &quot;@(d/transact conn [{:db/id #db/id[db.part/user] :lot/trade-date (.getTime (new Date.))}])&quot; &quot;@(d/transact conn [{:db/id #db/id[db.part/user] :lot/trade-date (.getTime (Date.))}])&quot; &quot;@(d/transact conn [{:db/id #db/id[db.part/user] :lot/trade-date (Date.)}])&quot; &quot;(Instant.)&quot; &quot;(import java.time.Instant)&quot; &quot;(Instant.\n  )&quot; &quot;(Instant/now)&quot; &quot;(import [java.time.Instant java.time.LocalDateTime])&quot; &quot;(import [java.time. [Instant LocalDate]])&quot; &quot;(import [java.time [Instant LocalDate]])&quot; &quot;(import java.time.LocalDateTime)&quot; &quot;(LocalDateTime/from (Instant/now))&quot; &quot;(LocalDate/from (Instant/now))&quot; &quot;(import java.time.ZonedDateTime\n        )&quot; &quot;(ZonedDateTime/from (Instant/now))&quot; &quot;(tco/to-date (tcr/date-time))&quot; &quot;(tco/to-date (tcr/now))&quot; &quot;(tc/to-date (t/now))&quot; &quot;1&quot; &quot;(connectdb)&quot; &quot;conn&quot; &quot;(Date.)&quot; &quot;(* 1000 60 60 24)&quot; &quot;(deftest tax-lots\n  (testing \&quot;Creation\&quot;\n    (is (= (-TaxLot {:lot/quantity 100M\n                     :lot/price 10M\n                     :lot/tx-cost 7.95M\n                     :lot/description \&quot;Some text\&quot;\n                     :lot/trade-date (Date. 0)\n                     :lot/settlement-date (Date. (* 1000 60 60 24))})\n           {:domain/datatype :TaxLot\n            :lot/quantity 100M\n            :lot/price 10M\n            :lot/tx-cost 7.95M\n            :lot/description \&quot;Some text\&quot;\n            :lot/trade-date (Date. 0)\n            :lot/settlement-date (Date. (* 1000 60 60 24))\n            :lot/realized-gain 0M\n            :lot/unrealized-gain: 0M\n            }))))&quot; &quot;(deftest tax-lots\n  (testing \&quot;Creation\&quot;\n    (is (= (-TaxLot {:lot/quantity 100M\n                     :lot/price 10M\n                     :lot/tx-cost 7.95M\n                     :lot/description \&quot;Some text\&quot;\n                     :lot/trade-date (Date. 0)\n                     :lot/settlement-date (Date. (* 1000 60 60 24))})\n           {:domain/datatype :TaxLot\n            :lot/quantity 100M\n            :lot/price 10M\n            :lot/tx-cost 7.95M\n            :lot/description \&quot;Some text\&quot;\n            :lot/trade-date (Date. 0)\n            :lot/settlement-date (Date. (* 1000 60 60 24))\n            :lot/realized-gain 0M\n            :lot/unrealized-gain 0M\n            }))))&quot; &quot;(deftest tax-lots\n  (testing \&quot;Creation\&quot;\n    (is (= (-&gt;TaxLot {:lot/quantity 100M\n                     :lot/price 10M\n                     :lot/tx-cost 7.95M\n                     :lot/description \&quot;Some text\&quot;\n                     :lot/trade-date (Date. 0)\n                     :lot/settlement-date (Date. (* 1000 60 60 24))})\n           {:domain/datatype :TaxLot\n            :lot/quantity 100M\n            :lot/price 10M\n            :lot/tx-cost 7.95M\n            :lot/description \&quot;Some text\&quot;\n            :lot/trade-date (Date. 0)\n            :lot/settlement-date (Date. (* 1000 60 60 24))\n            :lot/realized-gain 0M\n            :lot/unrealized-gain 0M\n            }))))&quot; &quot;(t/local-date)&quot; &quot;(t/to-java-date (t/local-date))&quot; &quot;(t/to-java-date (t/with-zone (t/local-date-time) (t/zone-id)))&quot; &quot;(t/local-date-time)&quot; &quot;(t/zone-id)&quot; &quot;(.atStartOfDay)&quot; &quot;(t/to-java-date (t/with-zone (t/local-date) (t/zone-id)))&quot; &quot;(t/local-date (t/instant))&quot; &quot;(t/instant)&quot; &quot;(t/local-date (Date/from (t/instant)))&quot; &quot;(jt/local-date)&quot; &quot;(jt/local-date 2016 3 31)&quot; &quot;(-&gt;TaxLot 100M [{:domain/datatype :FinTrans}])&quot; &quot;(-&gt;EquityPosition security [] )&quot; &quot;(-&gt;EquityPosition {} [] )&quot; &quot;(di/rebuild-db)&quot;], :remote []}}</component>
</project>