<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1481079722519">{:repl-history {:ide [], :local [&quot;di/uri&quot; &quot;(Date/today\n  )&quot; &quot;(Date/now\n  )&quot; &quot;(LocalDate)&quot; &quot;(LocalDate.\n  )&quot; &quot;@(d/transact conn {:db/id #db/id[db.part/user] :lot/trade-date (LocalDate/now)})&quot; &quot;(def conn (d/connect di/uri))&quot; &quot;@(d/transact conn [{:db/id #db/id[db.part/user] :lot/trade-date (LocalDate/now)}])&quot; &quot;@(d/transact conn [{:db/id #db/id[db.part/user] :lot/trade-date (.getTime (new Date.))}])&quot; &quot;@(d/transact conn [{:db/id #db/id[db.part/user] :lot/trade-date (.getTime (Date.))}])&quot; &quot;@(d/transact conn [{:db/id #db/id[db.part/user] :lot/trade-date (Date.)}])&quot; &quot;(Instant.)&quot; &quot;(import java.time.Instant)&quot; &quot;(Instant.\n  )&quot; &quot;(Instant/now)&quot; &quot;(import [java.time.Instant java.time.LocalDateTime])&quot; &quot;(import [java.time. [Instant LocalDate]])&quot; &quot;(import [java.time [Instant LocalDate]])&quot; &quot;(import java.time.LocalDateTime)&quot; &quot;(LocalDateTime/from (Instant/now))&quot; &quot;(LocalDate/from (Instant/now))&quot; &quot;(import java.time.ZonedDateTime\n        )&quot; &quot;(ZonedDateTime/from (Instant/now))&quot; &quot;(tco/to-date (tcr/date-time))&quot; &quot;(tco/to-date (tcr/now))&quot; &quot;(tc/to-date (t/now))&quot; &quot;1&quot; &quot;(Date.)&quot; &quot;(* 1000 60 60 24)&quot; &quot;(deftest tax-lots\n  (testing \&quot;Creation\&quot;\n    (is (= (-TaxLot {:lot/quantity 100M\n                     :lot/price 10M\n                     :lot/tx-cost 7.95M\n                     :lot/description \&quot;Some text\&quot;\n                     :lot/trade-date (Date. 0)\n                     :lot/settlement-date (Date. (* 1000 60 60 24))})\n           {:domain/datatype :TaxLot\n            :lot/quantity 100M\n            :lot/price 10M\n            :lot/tx-cost 7.95M\n            :lot/description \&quot;Some text\&quot;\n            :lot/trade-date (Date. 0)\n            :lot/settlement-date (Date. (* 1000 60 60 24))\n            :lot/realized-gain 0M\n            :lot/unrealized-gain: 0M\n            }))))&quot; &quot;(deftest tax-lots\n  (testing \&quot;Creation\&quot;\n    (is (= (-TaxLot {:lot/quantity 100M\n                     :lot/price 10M\n                     :lot/tx-cost 7.95M\n                     :lot/description \&quot;Some text\&quot;\n                     :lot/trade-date (Date. 0)\n                     :lot/settlement-date (Date. (* 1000 60 60 24))})\n           {:domain/datatype :TaxLot\n            :lot/quantity 100M\n            :lot/price 10M\n            :lot/tx-cost 7.95M\n            :lot/description \&quot;Some text\&quot;\n            :lot/trade-date (Date. 0)\n            :lot/settlement-date (Date. (* 1000 60 60 24))\n            :lot/realized-gain 0M\n            :lot/unrealized-gain 0M\n            }))))&quot; &quot;(deftest tax-lots\n  (testing \&quot;Creation\&quot;\n    (is (= (-&gt;TaxLot {:lot/quantity 100M\n                     :lot/price 10M\n                     :lot/tx-cost 7.95M\n                     :lot/description \&quot;Some text\&quot;\n                     :lot/trade-date (Date. 0)\n                     :lot/settlement-date (Date. (* 1000 60 60 24))})\n           {:domain/datatype :TaxLot\n            :lot/quantity 100M\n            :lot/price 10M\n            :lot/tx-cost 7.95M\n            :lot/description \&quot;Some text\&quot;\n            :lot/trade-date (Date. 0)\n            :lot/settlement-date (Date. (* 1000 60 60 24))\n            :lot/realized-gain 0M\n            :lot/unrealized-gain 0M\n            }))))&quot; &quot;(t/local-date)&quot; &quot;(t/to-java-date (t/local-date))&quot; &quot;(t/to-java-date (t/with-zone (t/local-date-time) (t/zone-id)))&quot; &quot;(t/local-date-time)&quot; &quot;(t/zone-id)&quot; &quot;(.atStartOfDay)&quot; &quot;(t/to-java-date (t/with-zone (t/local-date) (t/zone-id)))&quot; &quot;(t/local-date (t/instant))&quot; &quot;(t/instant)&quot; &quot;(t/local-date (Date/from (t/instant)))&quot; &quot;(jt/local-date)&quot; &quot;(jt/local-date 2016 3 31)&quot; &quot;(-&gt;TaxLot 100M [{:domain/datatype :FinTrans}])&quot; &quot;(-&gt;EquityPosition security [] )&quot; &quot;(-&gt;EquityPosition {} [] )&quot; &quot;(d/q [:find ?e ?n :where [?e :account/name ?n]] (d/db conn))&quot; &quot;(d/q '[:find ?e ?n :where [?e :account/name ?n]] (d/db conn))&quot; &quot;(d/q '[:find (pull ?e [*]) :where [?e :account/name]] (d/db conn))&quot; &quot;(d/q '[:find (pull ?e [*]) :where [?e :account/id]] (d/db conn))&quot; &quot;(d/q '[:find (pull ?e ) :where [?e :account/id]] (d/db conn))&quot; &quot;(d/q '[:find (pull ?e *) :where [?e :account/id]] (d/db conn))&quot; &quot;(d/q '[:find (pull ?e [:db/id :account/name]) :where [?e :account/id]] (d/db conn))&quot; &quot;(d/q '[:find ?e :where [?e :account/id]] (d/db conn))&quot; &quot;(d/q '[:find ?e . :where [?e :account/id]] (d/db conn))&quot; &quot;(d/q '[:find [?e ...] :where [?e :account/id]] (d/db conn))&quot; &quot;(map #(d/entity (q/db conn) %) (d/q '[:find [?e ...] :where [?e :account/id]] (d/db conn)))&quot; &quot;(map #(d/entity (d/db conn) %) (d/q '[:find [?e ...] :where [?e :account/id]] (d/db conn)))&quot; &quot;(map #(d/pull (d/db conn) \&quot;*\&quot; %) (d/q '[:find [?e ...] :where [?e :account/id]] (d/db conn)))&quot; &quot;(map #(d/pull (d/db conn) \&quot;[*]\&quot; %) (d/q '[:find [?e ...] :where [?e :account/id]] (d/db conn)))&quot; &quot;(run-my-tests)&quot; &quot;system/system&quot; &quot;(pprint system/system)&quot; &quot;(keys system/system)&quot; &quot;(class system/system)&quot; &quot;system&quot; &quot;(system/system \&quot;\&quot;)&quot; &quot;(system/jetty-server \&quot;investment_tracker.ui.UI\&quot; \&quot;resources/public\&quot; )&quot; &quot;(init)&quot; &quot;(start)&quot; &quot;(.start (:server system))&quot; &quot;(:server system)&quot; &quot;(refresh)&quot; &quot;(cp/classpath)&quot; &quot;(map #(.getName %) (cp/classpath))&quot; &quot;(map #(.getPath %) (cp/classpath))&quot; &quot;(stop) (go)&quot; &quot;(codec/bytes-&gt;hex (nonce/random-bytes (/ nonce-size 2)))&quot; &quot;(codec/bytes-&gt;hex (nonce/random-bytes 8))&quot; &quot;(encrypt-credential \&quot;f8ca2c4f23337e5a\&quot; \&quot;password\&quot;)&quot; &quot;(encrypt-credential nil \&quot;password\&quot;)&quot; &quot;(encrypt-credential \&quot;f7b33968ea62e36e\&quot; \&quot;password\&quot;)&quot; &quot;(crypt/encrypt \&quot;password\&quot; 16384 8 1)&quot; &quot;(crypt/verify \&quot;password\&quot; (crypt/encrypt \&quot;password\&quot; 16384 8 1))&quot; &quot;(crypt/encrypt \&quot;\&quot; 16384 8 1)&quot; &quot;(crypt/encrypt \&quot;xxx\&quot; 16384 8 1)&quot; &quot;(di/rebuild-db)&quot; &quot;(connectdb)&quot; &quot;conn&quot; &quot;(d/db conn)&quot; &quot;(d/entity (d/db conn) [:user/id \&quot;paul@prajnainc.com\&quot;])&quot; &quot;(:user/credentials (d/entity (d/db conn) [:user/id \&quot;paul@prajnainc.com\&quot;]))&quot; &quot;(validate-user \&quot;paul@prajninc.com\&quot; \&quot;xxx\&quot;)&quot; &quot;(sys/go)&quot; &quot;(get-user \&quot;paul@prajnainc.com\&quot;)&quot; &quot;(validate-user \&quot;paul@prajnainc.com\&quot; \&quot;\&quot;)&quot; &quot;(validate-user \&quot;huu@prajnainc.com\&quot; \&quot;xx\&quot;)&quot; &quot;(validate-user \&quot;paul@prajnainc.com\&quot; \&quot;xxx\&quot;)&quot; &quot;(stop)&quot; &quot;(go)&quot;], :remote []}}</component>
</project>