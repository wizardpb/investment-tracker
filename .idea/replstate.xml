<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1461096615946">{:repl-history {:ide [], :local [&quot;(first (d/q '[:find (pull ?e [*]) :where [?e :equity/ticker :AAPL]] (d/db conn)))&quot; &quot;(d/q '[:find ?e ?i :where [?e :db/txInstant ?t]] (d/db conn))&quot; &quot;(d/q '[:find ?e ?i :where [?e :db/txInstant ?i]] (d/db conn))&quot; &quot;(load-schema conn)&quot; &quot;@(db/transct [\n              {:db/id #db/id[db.part/user] :lot/quantity 1000M}\n              {:db/id #db/id[db.part/user] :lot/quantity -1000M}])&quot; &quot;@(d/transct [\n              {:db/id #db/id[db.part/user] :lot/quantity 1000M}\n              {:db/id #db/id[db.part/user] :lot/quantity -1000M}] (d/db conn))&quot; &quot;@(d/transact [\n              {:db/id #db/id[db.part/user] :lot/quantity 1000M}\n              {:db/id #db/id[db.part/user] :lot/quantity -1000M}] (d/db conn))&quot; &quot;@(d/transact conn [\n              {:db/id #db/id[db.part/user] :lot/quantity 1000M}\n              {:db/id #db/id[db.part/user] :lot/quantity -1000M}])&quot; &quot;(d/q '[:find (pull ?e [*]) :where [?e :tx 13194139540141 ]])&quot; &quot;(d/q '[:find (pull ?e [*]) :where [?e :tx 13194139540141 ]] (d/db conn))&quot; &quot;(d/q '[:find (pull ?e [*]) :where [?e _ _ 13194139540141 ]] (d/db conn))&quot; &quot;(d/q '[:find (pull ?e [*]) :where [?e _ _ 13194139540141 _]] (d/db conn))&quot; &quot;(d/q '[:find ?e :where [?e _ _ 13194139540141 _]] (d/db conn))&quot; &quot;(d/q '[:find (pull ?e [:db/id :tx]) :where [?e :lot/quantity _]] (d/db conn))&quot; &quot;(keys (first (d/q '[:find (pull ?e [*]) :where [?e :lot/quantity _]] (d/db conn))))&quot; &quot;(d/q '[:find (pull ?e [*]) :where [?e :lot/quantity _]] (d/db conn))&quot; &quot;(keys (first (first (d/q '[:find (pull ?e [*]) :where [?e :lot/quantity _]] (d/db conn)))))&quot; &quot;(keys (first (first (d/q '[:find ?e :where [?e :lot/quantity _]] (d/db conn)))))&quot; &quot;(d/q '[:find ?e :where [?e :lot/quantity _]] (d/db conn))&quot; &quot;(d/entity (q/db conn) 17592186051246)&quot; &quot;(keys (d/entity (d/db conn) 17592186051246))&quot; &quot;(datoms (d/db conn) :avet :log/quantity)&quot; &quot;(d/datoms (d/db conn) :avet :log/quantity)&quot; &quot;(count (d/datoms (d/db conn) :avet :log/quantity))&quot; &quot;(d/tx-range (d/log (d/db conn)) nil nil)&quot; &quot;(d/tx-range (d/log conn) nil nil)&quot; &quot;(iterator-seq (d/tx-range (d/log conn) nil nil))&quot; &quot;(:data (d/tx-range (d/log conn) nil nil))&quot; &quot;(type (d/tx-range (d/log conn) nil nil))&quot; &quot;(seq (d/tx-range (d/log conn) nil nil))&quot; &quot;(seq (d/datoms (d/db conn) :avet :log/quantity))&quot; &quot;(last (seq (d/datoms (d/db conn) :avet :log/quantity)))&quot; &quot;(last (seq (d/tx-range (d/log conn) nil nil)))&quot; &quot;(seq (d/tx-range (d/log conn) 13194139540141 13194139540141))&quot; &quot;(d/entity 17592186051246)&quot; &quot;(d/entity (d/db conn) 17592186051246)&quot; &quot;(d/pull (d/db conn) [*] 17592186051246)&quot; &quot;(d/pull (d/db conn) '[*] 17592186051246)&quot; &quot;(first (:data (first (seq (d/tx-range (d/log conn) 13194139540141 nil)))))&quot; &quot;(count (first (:data (first (seq (d/tx-range (d/log conn) 13194139540141 nil))))))&quot; &quot;(rest (:data (first (seq (d/tx-range (d/log conn) 13194139540141 nil)))))&quot; &quot;(map #(first %1) (rest (:data (first (seq (d/tx-range (d/log conn) 13194139540141 nil))))))&quot; &quot;(map #(type %1) (rest (:data (first (seq (d/tx-range (d/log conn) 13194139540141 nil))))))&quot; &quot;(map #(.e %1) (rest (:data (first (seq (d/tx-range (d/log conn) 13194139540141 nil))))))&quot; &quot;(map #(.e %1) (:data (seq (d/tx-range (d/log conn) 13194139540141 nil))))&quot; &quot;(map #(.e (first %1)) (:data (seq (d/tx-range (d/log conn) 13194139540141 nil))))&quot; &quot;(map #(first %1) (:data (seq (d/tx-range (d/log conn) 13194139540141 nil))))&quot; &quot;(map #(type %1) (:data (seq (d/tx-range (d/log conn) 13194139540141 nil))))&quot; &quot;(seq (d/tx-range (d/log conn) 13194139540141 nil))&quot; &quot;(:data (first (seq (d/tx-range (d/log conn) 13194139540141 nil))))&quot; &quot;(type (:data (first (seq (d/tx-range (d/log conn) 13194139540141 nil)))))&quot; &quot;(map #(type %) (:data (first (seq (d/tx-range (d/log conn) 13194139540141 nil)))))&quot; &quot;(count (:data (first (seq (d/tx-range (d/log conn) 13194139540141 nil)))))&quot; &quot;(def txs (seq (d/tx-range (d/log conn) 13194139540141 nil)))&quot; &quot;txs&quot; &quot;(:data (first txs))&quot; &quot;(map #(type %) (:data (first txs)))&quot; &quot;(map #(.e %) (:data (first txs)))&quot; &quot;(map #(.e %) (rest (:data (first txs))))&quot; &quot;(map #(vector :db.fn/retractEntity (.e %)) (rest (:data (first txs))))&quot; &quot;@(d/transact conn (map #(vector :db.fn/retractEntity (.e %)) (rest (:data (first txs)))))&quot; &quot;(defn rebuild-db []\n  (d/delete-database uri)\n  (d/create-database uri)\n  (let [conn (d/connect uri)]\n    (load-schema conn)))&quot; &quot;client/get (format-yahoo-historical-url [:YHOO] (new Date)) {:as :json})&quot; &quot;(client/get\n  (format-yahoo-historical-url [:YHOO] (new Date)) {:as :json})&quot; &quot;(client/get\n  (format-yahoo-historical-url [:YHOO] (Date. 116 3 15)) {:as :json})&quot; &quot;client/get&quot; &quot;(def a \&quot;a\&quot;)&quot; &quot;(with-bindings [a \&quot;as\&quot;] (print a))&quot; &quot;(with-bindings ['a \&quot;as\&quot;] (print a))&quot; &quot;(with-bindings [(var a) \&quot;as\&quot;] (print a))&quot; &quot;(with-bindings [{'a \&quot;a2\&quot;}] (print a))&quot; &quot;(with-bindings [['a \&quot;a2\&quot;]] (print a))&quot; &quot;(with-bindings {'a \&quot;a2\&quot;} (print a))&quot; &quot;(with-bindings {a \&quot;a2\&quot;} (print a))&quot; &quot;(with-bindings {(var a) \&quot;a2\&quot;} (print a))&quot; &quot;(with-redefs 'a \&quot;a2\&quot; (print a))&quot; &quot;(with-redefs a \&quot;a2\&quot; (print a))&quot; &quot;(with-redefs [a \&quot;a2\&quot;] (print a))&quot; &quot;(rebui)&quot; &quot;(range 1 nfiles)&quot; &quot;(range 1 5)&quot; &quot;(repeat 4 conn)&quot; &quot;1&quot; &quot;(make-security-tx-file)&quot; &quot;(rebuild-db)&quot; &quot;(def conn (rebuild-db))&quot; &quot;(d/q [:find ?e :where [?e :equity/ticker :AAPL]])&quot; &quot;(require '[datomic.api :as d])&quot; &quot;(d/q [:find ?e :where [?e :equity/ticker :AAPL]] (d/db conn))&quot; &quot;(def conn (d/connect uri))&quot; &quot;(d/connect uri)&quot; &quot;(-&gt;Position)&quot; &quot;(require [investment-tracker.position])&quot; &quot;(use [investment-tracker.position])&quot; &quot;(pprint {})&quot; &quot;conn&quot; &quot;(dq '[find: ?e :where [?e :equity/ticker :AAPL]] (d/db conn))&quot; &quot;(dq '[:find ?e :where [?e :equity/ticker :AAPL]] (d/db conn))&quot; &quot;(d/q '[:find ?e :where [?e :equity/ticker :AAPL]] (d/db conn))&quot; &quot;*ns*&quot; &quot;(require [investment-tracker.dbinit.core :as di])&quot;], :remote []}}</component>
</project>